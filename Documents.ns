Newspeak3
'Root'
class Documents usingPlatform: p ide: webIDE  = (
(*
This module supports the live editing of documents that include rich text and live widgets.

It implements an editor with two views: one view is a text editor on raw HTML, and the second is the same HTML, rendered. The editor is live - every edit causes immediate change in the rendered HTML.

Importantly, the HTML can specify embedded Hopscotch fragments using Ampleforth (still unsupported).  Indeed, the primary purpose here is to facilitate the creation of live documents which include programmed UI elements such as live literate programs. 

Design discussion:

The question arises, how to specify the mapping from class names used in the HTML to actual fragments. This mapping is required by Ampleforth. The set of UI elements one might want to embed is open-ended, and often created by the document author. Therefore we need to able to compute a fragment instance in the context of the document. This leads to the need to access all standard fragment classes, and to able to load new ones. Better yet, it would be nice to support widget development within the tool.

The above leads to the view that  this tool is an extension of the IDE (or even, part of the IDE). Need to figure out how to provide it in the UI. We will perhaps want a workspace that has access to this editor (or conversely, a presenter on the editor that has access to the IDE namespace) so that we can define the mapping that will be used by Ampleforth. And we'd want access to the IDE namespace, and so we end up with what  amounts to providing the IDE as part of the tool. It then seems natural to make this part of the IDE, so the namespace access, as well as search, help and workspaces are part of the UI already. Then the mapping is a slot of this module and accessible from regular workspaces. We have one mapping for all documents. We could also have per subject mappings, and set them on subject creation, managing them as sub-namespaces in the IDE.
*)
    |	
    private Map = p collections Map.
    private Subject = p hopscotch Subject.
    private Presenter = p hopscotch Presenter.
    private DOMParser = p hopscotch DOMParser.
    private ClassMirror = p mirrors ClassMirror.    
    private ObjectMirror = p mirrors ObjectMirror.
    private Color = p graphics Color.
    private ProgrammingPresenter = webIDE browsing ProgrammingPresenter.
    private NamespaceSubject = webIDE browsing NamespaceSubject.
    private DefinitionTemplate = webIDE browsing DefinitionTemplate.
    private ObjectSubject = webIDE browsing ObjectSubject.
    private ClassSubject = webIDE browsing ClassSubject.
    private ClassModel = webIDE browsing ClassModel.
    private MethodSubject = webIDE browsing MethodSubject.
    private ThreadSubject = webIDE debugging ThreadSubject.    
    private Root = webIDE namespacing Root.
    private ide = webIDE.
    private retainedPlatform = p.
    parser = retainedPlatform mirrors compiler parser.
  |
  webIDE browsing addObjectViews: {DocumentPresenter} forKind: 'isKindOfDocument'.
) (
public class TwoViewEditorSubject onModel: m <Document> = Subject onModel: m (
  | public isAmpleforth <Boolean> ::= true. |
) (
isMyKind: f <Fragment> ^ <Boolean> = (
  ^f isKindOfTwoViewEditorSubject
)
public isKindOfTwoViewEditorSubject ^ <Boolean> = (
  ^true
)
public document ^ <Document> = (
  ^model
)
public setText: s <String> = (
  document contents: s
)
public text ^ <String> = (
  ^document contents
)
public name ^ <String> = (
  ^document name
)
public createPresenter ^ <Presenter>  = (
  ^TwoViewEditorPresenter onDocumentSubject: self
)
public parseDefinition: src <String> ^ <AST> 
  = (
   ^[parser parseLazySlotDeclaration: src] on: Error do: [:els |
       [parser parseClassDeclaration: src] on: Error do: [:ecd |
          [parser parseMethodDeclaration: src] on: Error do: [:ecm |
              Error signal: 'Expected a lazy slot, class or method declaration'
          ]
       ]
   ]
)
) : (
public named: n <String> initialContents: s <String> = (
  ^onModel: (Document named: n contents: s)
)
)
public class TwoViewEditorPresenter onDocumentSubject: s <TwoViewEditorSubject> = Presenter onSubject: s (
  |
  public mapping <Map[Symbol, Fragment]> = Map new at: 'AmpleforthTargetDocument' put: subject document; yourself.    
  rendered <HolderComposer> = holder: render. 
  (* Is the user editing the live view? *)
  updatingFromLive <Boolean> ::= false.
  (* Did the user just paste into the live view? *)  
  pasting <Boolean> ::= false.
  cm <CodeMirrorFragment>  
  rawViewToggle <ToggleComposer>
  |
) (
public isKindOfTwoViewEditorPresenter ^ <Boolean> = (
  ^true
)
isMyKind: f <Fragment> ^ <Boolean> = (
  ^f isKindOfTwoViewEditorPresenter
)
updateFromRawView = (
  (* Recompute the live view using #render and update the holder *)
  rendered content: render.
  (* Add an update handler to the new live view. *)
  addUpdateHandler
)
updateVisualsFromSameKind: oldPresenter <Self> ^ <Alien[Element]> = (
  | result <Alien[Element]> = super updateVisualsFromSameKind: oldPresenter. |
  addUpdateHandler.
  ^result
)
updater = (
  ^[
    (* Note that the live view was edited *)
    updatingFromLive: true.  
    (* Update the raw view based on the live view *)
    cm text: scrubbedLiveViewSource. 
    nil]
)
addUpdateHandler   = (
  (* Add an update handler to the new live view. *)
  (rendered content visual at: #firstChild) at: #updateRawHTML put: updater;
    at: #onpaste put: [:e <Alien[ClipboardEvent]> | 
       (* note that a paste is happening; the view processing
           will happen later, and rely on this *)
        pasting:: true.
        nil
      ]
)
jsDocument = (
  ^retainedPlatform js global at: #document
)
ampletErrorMessage: ampletName <String> ^ <Alien[Element]> = (
  | amplet <Alien[Element]> = jsDocument createElement: 'div'. |
  amplet 
    at: #className put: 'ampleforthError';
    at: #innerText put: ampletName, ' is not a valid amplet name. It must be a legal Newspeak unary selector. ';
    at: #style put: 'color: red; font-weight: bold';
    at: #contentEditable put: 'false'.
  ^amplet
)
ampletNamed: n <String> ^ <Alien[Element]> = (
  ^' <div class = "ampleforth" name = "', n, '" contenteditable = "false"> </div> '
)
render ^ <AmpleforthFragment> = (
  | result <AmpleforthFragment> = subject isAmpleforth ifTrue: [ampleforth: subject text mapping: mapping] ifFalse: [html: subject text]. |
  ^result
)
public toggleRawView = (
  rawViewToggle toggle
)
scrubbedLiveViewSource ^ <String> = (
(* The live view's innerHTML contains the HTML sources for the live widgets added into it.
     Before we use this to set the raw view source, these must be eliminated. They not only
     pollute the model, but can lead to duplicate widgets as well.
     *)
  |
  treeCopy = rendered visual cloneNode: true.
  amplets <Alien[HTMLCollection[Node]]> = treeCopy getElementsByClassName: #ampleforth. |
  0 to: (amplets at: #length) - 1 do: [:i <Integer> | | amplet <Alien[Node]> = amplets item: i. |
  amplet isNil ifFalse: [amplet hasChildNodes ifTrue: [amplet removeChild: (amplet at: #firstChild)]]
  ].
  ^treeCopy at: #innerHTML
)
public rawEditor = (
  ^cm
)
public respondToMake2: nodeType <String> = (
  (* Extract the text from the selection *)
  | 
  jsDoc <Alien[Document]> =  retainedPlatform js global at: #document.
  jsWindow <Alien[Window]> = retainedPlatform js global at: #window.
  selection <Alien[Selection]> = jsDoc getSelection.
  textToStyle <String> = selection toString.
  styled = jsDoc createElement: #span. 
  s2 <Alien[Selection]>
  s3 <Alien[Selection]>
  range <Alien[Range]>
  r1 <Alien[Range]>
 o1 <Alien[DocumentFragment]>
  d <Alien[HTMLCollection]>
  toggle ::= true.
  |
  (* No selection. We might warn about this *)
  (selection at: #type) = #Range ifFalse: [^self]. 
  (* Here is where we should decide if we need to toggle *)
  r1:: selection getRangeAt: 0.
  o1:: r1 extractContents.
  d:: o1 at: #children.
  (* go thru all nodes and see if property holds *)
  0 to: (d at: #length) - 1 do: [:i |  
     | n = d item: i.  |
     s3:: jsWindow getComputedStyle: n.
     toggle printString out.
     toggle:: toggle and: [(s3 getPropertyValue: 'text-decoration-line' ) = 'underline'].
     toggle printString out.
     ].
  (* then we can decide if our style applies to it; if so we must toggle *)
  toggle ifTrue: [
     0 to: (d at: #length) - 1 do: [:i |  
       | n = d item: i.  |
       (n at: #style) at: 'text-decoration-line' put: #none.
     ]. 
  ] ifFalse: [(styled at: #style) at: 'text-decoration-line' put: #underline].
    (* Remove the selection *)
  selection deleteFromDocument.
  (* Get a new selection, at the point where the selection was.*)
  s2:: (retainedPlatform js global at: #document) getSelection.
  range:: s2 getRangeAt: 0.
  (* replace the selection with the new contents. 
       First insert a new node.
  *)
  range insertNode: styled.
  (* Then insert revised text into that node *)
  styled appendChild: o1.
  (* force an update of the live view; this will update the raw view to include the changes *)
  updater value.
  subject setText: scrubbedLiveViewSource.
  (* Then force a re-rendering based on the updated raw view *)
  updateFromRawView
)
public replaceSelectionUsing: fos <[:Alien[Selection]]> = (
  (* Replace the selection with the result of invoking fos; fos is a function of the selection, which we pass into it so it can compute the replacement *)
  | 
  jsDoc <Alien[Document]> =  retainedPlatform js global at: #document.
  selection <Alien[Selection]> = jsDoc getSelection.
  replacement <Alien[Element]>
  selectionPostRemoval <Alien[Selection]>
  range <Alien[Range]>
  |
  (* No selection. We might warn about this *)
  (* What types of selection we support should be specified by the caller. A Caret is okay for making a list, as we will extend the selection, but creates useless style tags. *)
  (selection at: #type) = #None ifTrue: [^self].
  (* compute replacement value based on selection *)
  replacement:: fos value: selection.
    (* Remove the selection. This must be done after computing the replacement. Otherwise, the seelction is garbage by the time fos sees it *)
  selection deleteFromDocument.
  selectionPostRemoval:: (retainedPlatform js global at: #document) getSelection.
  range:: selectionPostRemoval getRangeAt: 0.
  range insertNode: replacement.
  (* force an update of the live view; this will update the raw view to include the changes *)  
  updater value.
  subject setText: scrubbedLiveViewSource.
  (* Then force a re-rendering based on the updated raw view to activate the amplet*)
  updateFromRawView
)
public respondToMakeOrderedList = (
(* Insert an ol containing a li node containg the original selection  *)
  respondToMakeList: 'ol'
)
acceptNewLinkFrom: template = (
  | styled = template visual at: #parentNode. |
  styled at: #href put: template text. 
  styled at: #contentEditable put: #false. 
  styled removeChild: template
)
public respondToMakeList = (
(* Insert a ul containing a li node containing the original selection  *)
  respondToMakeList: 'ul'
)
public respondToMakeAmplet = (
  makeAmplet: [:ampletName | ampletName]
)
public respondToMakeLink = (
  makeAmplet: [:ampletName <String> | 'htmlLink: ''', ampletName, ''''].
)
public makeAmplet: ampletGenerator <[:String | String]> = (
(*Takes a closure, ampletGenerator, that takes the  text and returns a Newspeak expression. The closure is fed the selected text, and the resulting expression defines the name attribute of an HTML amplet definition using the method #ampletNamed:. This will be used to compute a Hopscotch fragment whose visual will be inserted in the DOM in place of the selection. *)
  (* Extract the text from the selection *)
  | 
  jsDoc <Alien[Document]> =  retainedPlatform js global at: #document.
  selection <Alien[Selection]> = jsDoc getSelection.
  ampletName <String> = selection toString.
  amplet = jsDoc createElement: 'div'.
  s2
  range
  |
  (* No selection. We might warn about this *)
  (selection at: #type) = #Range ifFalse: [^self]. 
  (* Remove the selection *)
  selection deleteFromDocument.
  s2:: (retainedPlatform js global at: #document) getSelection.
  range:: s2 getRangeAt: 0.
  range insertNode: amplet.
  (* compute the amplet using ampletGenerator and set its HTML definition accordingly *)
  amplet at: #outerHTML  put: ( ampletNamed: (ampletGenerator value: ampletName)).
  (* force an update of the live view; this will update the raw view to include the changes *)
  updater value.
  subject setText: scrubbedLiveViewSource.
  (* Then force a re-rendering based on the updated raw view to activate the amplet*)
  updateFromRawView
)
definition ^ <Fragment> = (
| docWidth <Integer> = ((jsDocument at: #body) at: #clientWidth). |
  cm:: codeMirror: subject text.
  updateFromRawView.
  cm useEditControls: false.
  cm 
    changeResponse: [:ed <CodeMirrorFragment> :event <Event>  | 
    subject setText: ed textBeingAccepted. 
    (updatingFromLive and: [pasting not])
      ifTrue: [(* Reset updatingFromLive, in case the user edits the raw view next;
                        The live view's handler(s) will programmatically update the rest *)
        updatingFromLive: false
        ]  ifFalse: [ (* set pasting back to its default, in case it was true *)
        updatingFromLive: false.
        pasting:: false.
        (* The change is a result of editing the raw view by the user; update accordingly *)
        updateFromRawView
      ].
    ]; 
    acceptResponse: [:ed <CodeMirrorFragment> :event <Event>  | updateGUI: [subject setText: ed textBeingAccepted]].
    (cm visual at: #style) at: 'width' put: docWidth//2;  at: 'max-width' put: docWidth//2; at: 'min-width' put: 200.
    rawViewToggle:: collapsed: [nothing] expanded: [cm visual. cm editor setSize: '40em'. cm].
    ^row: { 
        rawViewToggle.
        rendered
        }
)
public respondToDefineMethod = (
  | 
  jsDoc <Alien[Document]> =  retainedPlatform js global at: #document.
  selection <Alien[Selection]> = jsDoc getSelection.
  ampletName <String> = selection toString.
  |
  updateGUI: [subject document addMethodFromSource: ampletName]
)
public respondToDefineNestedClass = (
  | 
  jsDoc <Alien[Document]> =  retainedPlatform js global at: #document.
  selection <Alien[Selection]> = jsDoc getSelection.
  ampletName <String> = selection toString.
  |
  updateGUI: [subject document addClassFromSource: ampletName]
)
public respondToDefineLazySlot = (
  | 
  jsDoc <Alien[Document]> =  retainedPlatform js global at: #document.
  selection <Alien[Selection]> = jsDoc getSelection.
  ampletName <String> = selection toString.
  |
  updateGUI: [subject document addLazySlotFromSource: ampletName]
)
public respondToShowIt = (
  makeAmplet: [:ampletName <String> | 'label: (evaluate: ''', ampletName withoutNbsp, ''') result reflectee printString']
)
public respondToMakeButton = (
  makeAmplet: [:ampletName <String> | 'button:''', ampletName withoutNbsp, '''action:[updateGUI:[', ampletName withoutNbsp, ']]']
)
public respondToDefineIt = (
  | 
  jsDoc <Alien[Document]> =  retainedPlatform js global at: #document.
  selection <Alien[Selection]> = jsDoc getSelection.
  src <String> = selection toString.
  ast = subject parseDefinition: src.
  |
  updateGUI: [
     subject document addDefinitionFor: ast from: src.  
  ]
)
removeTag: name <String> fromElement: element <Alien[Element]> = (
  (* Remove all elements with a given tag name from an element. *)
  onChildrenOf: element do: [ :e | removeTag: name fromElement: e. ].
  (element at: #nodeName) = name ifTrue: [ replaceElementWithChildren: element ].
)
public respondToMakeBold = (
  respondToMake: 'B'
)
replaceElementWithChildren: element <Alien[Element]> = (
  | 
  parent <Alien[Element]> = element at: #parentNode.
  children <Alien[NodeList]> = element at: #childNodes.
  |
  [ (children at: #length) > 0 ] whileTrue: [ parent insertBefore: (children at: 0) before: element. ].
  parent removeChild: element.
)
isElement: element <Alien[Element]> enclosedIn: tagName <String>= (
  element = nil ifTrue: [^false].
  (element at: #nodeName) = tagName ifTrue: [^true].
  ^isElement: (element at: #parentNode) enclosedIn: tagName.
)
isElement: element <Alien[Element]> entirelyMadeOf: tagName <String> = (
  (* Empty text nodes don't count, but finding a non-empty text node that isn't covered in tagName does count *)
  (element at: #nodeName) = '#text' ifTrue: [^(element at: #nodeValue) = ''].
  (element at: #nodeName) = tagName ifTrue: [^true].
  onChildrenOf: element do: [ :e | (isElement: e entirelyMadeOf: tagName) ifFalse: [^false]. ].
  ^true.
)
public respondToMakeItalic = (
  respondToMake: 'I'
)
public respondToUnderline = (
  respondToMake: 'U'
)
public respondToMakeList: nodeType <String> = (
(* Insert a list node containing a li node containing the original selection.
    It is the caller's reponsibility to pass in a valid list nodeType (either ul or ol).
*)
  replaceSelectionUsing: [:selection | 
       | 
       jsDoc <Alien[Document]> =  retainedPlatform js global at: #document.
       range <Alien[Range]> = (extendSelectionToLine: selection) getRangeAt: 0.
       styled = jsDoc createElement: nodeType.
       li = jsDoc createElement: 'li'.
       |
       styled appendChild: li.
       li appendChild: range extractContents.
       styled
  ]
)
extendSelectionToLine: selection = (
  (selection at: #type) = #Caret ifTrue: [
    selection modify: 'move' direction: 'backward' granularity: 'lineboundary'.
    selection modify: 'extend' direction: 'forward' granularity: 'lineboundary'.
  ].
  ^selection
)
onChildrenOf: e <Alien[Element]> do: block <[:Alien[Element]]> = (
  |
  jsChildren <Alien[NodeList]> = e at: #childNodes.
  children = Array new: (jsChildren at: #length).
  |
  0 to: (jsChildren at: #length) - 1 do: [ :i | children at: (i + 1) put: (jsChildren at: i) ].
  children do: block
)
public respondToMake: nodeType <String> = (
   |
   jsDoc <Alien[Document]> = retainedPlatform js global at: #document.
   range <Alien[Range]> = jsDoc getSelection getRangeAt: 0.
   contents <Alien[Element]> = jsDoc createElement: #span.
   |
   contents appendChild: range extractContents.
   (isElement: (range at: #commonAncestorContainer) enclosedIn: nodeType) ifTrue: [
     (* Peel enclosing nodeType *)
     removeTag: nodeType fromElement: contents.
     range insertNode: contents.
     cleanUpElement: (peelTag: nodeType fromElement: contents).
     replaceElementWithChildren: contents.
   ] ifFalse: [
     | parent <Alien[Element]> |
     (* Nothing to peel, but remove nodeType from inside *)
     (isElement: contents entirelyMadeOf: nodeType) ifTrue: [
       removeTag: nodeType fromElement: contents.
       range insertNode: contents.
       parent:: contents at: #parentNode.
       replaceElementWithChildren: contents.
       cleanUpElement: parent.
     ] ifFalse: [
       (* Add nodeType *)
       | styled <Alien[Element]> = jsDoc createElement: nodeType. |
       removeTag: nodeType fromElement: contents.
       styled appendChild: contents.
       range insertNode: styled.
       replaceElementWithChildren: contents.
       cleanUpElement: (styled at: #parentNode).
     ].
   ].
  (* force an update of the live view; this will update the raw view to include the changes *)
  updater value.
  subject setText: scrubbedLiveViewSource.
  (* Then force a re-rendering based on the updated raw view to activate the amplet*)
  updateFromRawView
)
cleanUpElement: e <Alien[Element]> = (
  |
  nodeName <String> = e at: #nodeName.
  previous <Alien[Element]> = e at: #previousSibling.
  |
  (* Don't touch elements we don't create *)
  ({"B". "I". "U"} indexOf: nodeName) > 0 ifTrue: [
    (* Remove empty text children *)
    e normalize.
    (* Remove empty nodes *)
    (e at: #firstChild) = nil ifTrue: [ e remove. ^self ].
    (* Merge adjacent nodes *)
    previous = nil ifFalse: [
      nodeName = (previous at: #nodeName) ifTrue: [
        [ (e at: #firstChild) = nil ] whileFalse: [ previous appendChild: (e at: #firstChild) ].
        e remove
      ]
    ]
   ].
   onChildrenOf: e do: [ :e | cleanUpElement: e ]
)
peelTag: name <String> fromElement: element <Alien[Element]> = (
  | cursor <Alien[Element]> ::= element. grandparent <Alien[Element]> |
  [
    |
    parent <Alien[Element]> = cursor at: #parentNode.
    grandparent <Alien[Element]> = parent at: #parentNode.
    right <Alien[Element]> = parent cloneNode: false.
    |
    grandparent insertBefore: right before: (parent at: #nextSibling).
    (* Give the nodes after the element a new parent. *)
    [ (cursor at: #nextSibling) = nil ] whileFalse: [ right appendChild: (cursor at: #nextSibling) ].
    (parent at: #nodeName) out.
    (parent at: #nodeName) = name ifTrue: [
      (* We hit the tag we want to peel off. *)
      grandparent insertBefore: cursor before: right.
      ^grandparent.
    ] ifFalse: [
      (* Give the cursor its own parent, turning one parent into three. *)
      | middle <Alien[Element]> = parent cloneNode: false. |
      grandparent insertBefore: middle before: right.
      middle appendChild: cursor.
      cursor:: middle.
    ]
  ] repeat.
)
) : (
public onSubject: os <ObjectSubject> ^ <Instance> = (
  ^onDocumentSubject: (TwoViewEditorSubject onModel: os objectMirror reflectee)
)
)
public class Document named: n <String> contents: s <String> = ProgrammingPresenter onSubject: dummySubject (
(*
A Document provides a context for evaluating Newspeak code, in order to present live Hopscotch fragments within the text. Access to the all the standard fragments is provided by inheriting them from ProgrammingPresenter. This inheritance is done only for that purpose; Document isn't a Presenter! This should be cleaned up. See PrefixPresenter for an example of how to do that.

We also want access to the IDE namespace, in support of literate programming. The #doesNotUnderstand: method provides this access.
Lastly, we implement the  #evaluateFragment: method that allows for evaluating expressions in the context of the Document, for reasons explained below.

By convention, the Document is made available to AmpleforthFragment via the mapping, under the key 'AmpleforthTargetDocument'. This allows AmpleforthFragment to process amplets, DOM nodes containing arbitrary Newspeak code snippets that produce Hopscotch fragments, by evaluating them as message sends to the Document. We use this convention because we don't want Hopscotch to depend on mirrors (most UI applications do not need mirrors as part of the platform) - neither directly or indirectly via Document. Hence Hopscotch, and in particular, AmpleforthFragment, cannot implement such evaluation by itself and must be given the Document instead. We can't give it the mirror, because the mapping must only consist of fragments.

The ampletCache holds stateful subjects the document requires. For example, if we embed an object presenter in a document via an amplet, it's subject holds on to an evaluator of its own, with a list of results etc. If we want this state to be retained as the document recomputes itself, we need to hold on to that subject and not  recompute it when the amplet gets processed. The ampletCache is where we can store this information. This avoids having each document class have specific fields to cache particular amplets. Furthermore, common usages (like embedding a workspace or an object presenter) are supported by convenience methods like #workspaceTagged: etc., which use the ampletCache, relieving the document author from having to deal with the subtleties of caching subjects.
*)
	|
    public name <String> ::= n.
	public contents <String> ::= s.
    mirror = ObjectMirror reflecting: self.
    ampletCache <Map[String, Subject]> = Map new.
	|
) (
public isKindOfDocument ^ <Boolean> = (
  ^true
)
doesNotUnderstand: message = (
	^Root
		at: message selector
		ifAbsent: [super doesNotUnderstand: message]
)
platform = (
  ^retainedPlatform
)
public evaluate: expr <String> ^ <ThreadMirror> = (
  ^mirror evaluate: expr
)
public isKindOfPresenter ^ <Boolean> = (
  (* we inherit from Presenter for implementation reasons only; just to provide access to all the standard fragment creation methods *)
  ^false
)
public isKindOfProgrammingPresenter ^ <Boolean> = (
  (* we inherit from ProgrammingPresenter for implementation reasons only; just to provide access to all theg standard fragment creation methods *)
  ^false
)
isMyKind: other ^ <Boolean> = (
  ^other isKindOfDocument
)
definition = (
  ^hyperrealError
)
public classSource ^ <String> = (
  | src = mirror getClass mixin declaration source. |
  ^src copyFrom: (src indexOf: '(') to: src size.
)
public hash ^ <Integer> = (
  ^ name hash bitXor: contents hash
)
public = other ^ <Boolean> = (
(* We cannot rely on the inherited = from Presenter, as this is really a fake presenter and not displayed directly *)
  ^name = other name and: [contents = other contents]
)
hyperrealError = (
  ^html: '<p style="color:red;"><b>Doubleplus Ungoodness Detected.</b></p>
<p style="color:red;">Document  <i>', name, '</i> is attempting to embed
itself within itself. This would require infinite space<a href = ''#footnote1''><sup>1</sup></a>. The most
likely cause is an <i>ampleforth</i> element referring to a method returning
<b>self</b> (or else, to #AmpleforthTargetDocument). Perhaps you forgot a return?</p>
<p style="color:red;">If you really meant to do this, you need to mediate via a link or
button. Otherwise, the Ministry of Truth recommends <a href = "https://kwarc.info/teaching/TDM/Borges.pdf"><i>On Exactitude in Science</i></a> by Borges.</p>
<p id="footnote1" style="color:red;">[1] If we could provide you with infinite space, you think we''d be
bothered writing code for mortals like you to use?</p>'
)
acceptNewLinkFrom: template = (
  | styled = template visual at: #parentNode. |
  styled at: #href put: template text. 
  styled at: #contentEditable put: #false. 
  styled removeChild: template visual
)
workspaceTagged: tag <String> ^ <ObjectPresenter> = (
   ^(ampletCache at: tag ifAbsentPut: [getWorkspace]) presenter
)
ampletForMethodNamed: n <Symbol> ofClass: c <Class> ^ <MethodPresenter> = (
^ (ide browsing MethodSubject onModel:
((ClassMirror reflecting: c) methods 
  findMirrorNamed: n)) presenter
)
getWorkspace ^ <ObjectSubject> = (
    | aws = ide theWorkspaceManager AllWorkspacesSubject new. |
    aws addWorkspace.
    (* Produce a fresh subject for the new workspace. Otherwise, the document and the workspace manager will share a presenter, and in some cases
    the presenter will be left in the document's fragment tree and be missing in the workspace manager's tree.
    *)
    ^ObjectSubject onModel: (aws allWorkspaces last objectMirror)
)
ampletForClass: c <Class> ^ <ClassPresenter> = (
|
cdm = (ClassMirror reflecting: c) mixin declaration.
cm = ide browsing ClassModel declaration: cdm exemplar: nil.
|

^(ClassSubject onClassModel: cm) presenter.
)
public evaluateFragment: expr <String> ^ <Fragment> = (
  | t <ThreadMirror | Error> = [evaluate: expr] on: Error do: [:ce | ce]. |
  t isKindOfThreadMirror ifFalse: [
  ^(link: t printString action: [inspectObjectMirror: (ObjectMirror reflecting: t)])
    color: (Color r: 1 g: 0 b: 0)  
  ].
  t isBroken ifTrue: [
        ^(link: t result reflectee printString action: [enterSubject: (ThreadSubject onModel: t)])
         color: (Color r: 1 g: 0 b: 0)].
  t result reflectee isKindOfFragment ifFalse: [
        ^(link: expr, ' does not evaluate to a valid Hopscotch fragment but to: ', t result reflectee printString
  action: [(inspectObjectMirror: t result)])
  color: (Color r: 1 g: 0 b: 0)].
  ^t result reflectee
)
inspect: o tag: tag <String> ^ <ObjectPresenter> = (
  ^(ampletCache at: tag ifAbsentPut: [ObjectSubject onModel: (ObjectMirror reflecting: o)]) presenter
)
linkTemplate = (
       | 
       jsDoc <Alien[Document]> =  retainedPlatform js global at: #document.
       dummy = jsDoc createElement: #div.
       template
       |
       
       template:: DefinitionTemplate 			
            caption: 'Insert URI for link:'
			initialText: 'https://yourURI'
			colorizerBlock:
				[:text <String> :cm <CodeMirrorFragment> | nil ]
			acceptResponse:
				[:template | updateGUI: [acceptNewLinkFrom: template]]
			cancelResponse:
				[:template | updateGUI: [(template visual at: #parentNode) replaceChild: dummy insteadOf: (template visual at: #parentNode)]].
       (*template parent: rendered content.*)
       ^template
)
htmlLink: selection <String> = (
       | 
       jsDoc <Alien[Document]> =  retainedPlatform js global at: #document.
       dummy = jsDoc createElement: #div.
       |
       dummy at: #innerHTML put: selection.
      ^DefinitionTemplate 			
            caption: 'Insert URI for link:'
			initialText: 'https://yourURIHere                                '
			colorizerBlock:
				[:text <String> :cm <CodeMirrorFragment> | nil ]
			acceptResponse:
				[:template | updateGUI: [acceptNewLinkFrom: template]]
			cancelResponse:
				[:template | updateGUI: [((template visual at: #parentNode) at: #parentNode) replaceChild: dummy insteadOf: (template visual at: #parentNode)]].
)
public addMethodFromSource: src <String> = (
   | b <MixinBuilder> = mirror getClass mixin asBuilder. |
   b methods addFromSource: src.
   ide  installFromBuilders: {b declaration}.
)
public addClassFromSource: src <String> = (
   | b <MixinBuilder> = mirror getClass mixin asBuilder. |
   b nestedClasses addFromSource: src.
   ide  installFromBuilders: {b declaration}.
)
public addLazySlotFromSource: src <String> = (
   | b <MixinBuilder> = mirror getClass mixin asBuilder. |
   b lazySlots addFromSource: src.
   ide  installFromBuilders: {b declaration}.
)
public makeDoItButton: src <String> ^ <ButtonFragment> = (
    ^button: src action: [updateGUI: [evaluate: src withoutNbsp]].
)
public addDefinitionFor: ast <ASTNode> from: src <String> = (
      ast isKindOfSlotDefAST ifTrue: [^addLazySlotFromSource: src].
      ast isKindOfClassDeclarationAST ifTrue: [^addClassFromSource: src].
      (*ast isKindOfMethodAST ifTrue: [*)^addMethodFromSource: src(*].*)
)
transclude: documentName <String> = (
    ^(DocumentSubject onModel: (ide namespacing Root at: documentName)) presenter
)
transcludeClass: className <String> = (
    ^ampletForClass: (ide namespacing Root at: className)
)
public addContentsUsingFolder: folder = (
  (* Docu-apps that have specific data representations they need to be able to save should do this here. By default, do nothing *)
)
jsDocument = (
  ^platform js global at: #document
)
mustBeLoaded: className = (
  Root at: className ifAbsent: [alert:  className, ' is not loaded, but the presentation requires it. Please load it now.']
)
) : (
)
class DocumentPresenter onDocumentSubject: s = ProgrammingPresenter onSubject: s (
  | public twoViewEditor <TwoViewEditorPresenter> |
) (
public isKindOfDocumentPresenter ^ <Boolean> = (
  ^true
)
isMyKind: other ^ <Boolean>  = (
  ^other isKindOfDocumentPresenter
)
respondToDelete = (
	updateGUI: [
      Root removeKey: subject name. 
      enterSubject: NamespaceSubject new
      ]
)
respondToInspectDocument = (
      enterSubject: (ide browsing ObjectSubject onModel: (ObjectMirror reflecting: subject document))
)
respondToMakeAmplet = (
  twoViewEditor respondToMakeAmplet
)
rawViewExposureButton  ^ <ButtonFragment> = (
  ^button: 'Toggle Raw HTML' action: [twoViewEditor toggleRawView]
)
respondToMakeBold = (
  twoViewEditor respondToMakeBold
)
respondToMakeItalic = (
  twoViewEditor respondToMakeItalic
)
respondToUnderline = (
  twoViewEditor respondToUnderline
)
makeAmpletButton ^ <ButtonFragment> = (
  ^button: 'Make It an Amplet' action: [respondToMakeAmplet]
)
saveDocumentButton = (
  ^saveButtonWithAction: [subject save]
)
helpText ^ <AmpleforthFragment> = (
  | mapping = Map new. |
  mapping 
    at: #documentName put: (label: subject name);
    at: #toggleRawViewButton put: rawViewExposureButton;
    at: #makeAmplet put: makeAmpletButton;
    at: #saveDocument put: saveDocumentButton;
    at: #hopscotchRefreshButton put: refreshButton;
    at: #hopscotchHelpButton put: helpButton;
    at: #documentMenu put: (dropDownMenu: [docMenu]).
  ^ampleforth: 'This is a document presenter. Below this help text you see a rich document editor, known as the <i>raw view</i>. 
  <br><br>
  Just above the editor is a toggle, that controls the display of a tool bar.
  When expanded, the tool bar contains the following:
  <ul>
  <li><div class = "documentName"></div></li>, the name of the document.
  <li><div class = "toggleRawViewButton"></div></li> Toogles the display of the <i>raw view</i> of the document. The raw view shows the raw HTML markup that defines the document contents. You can edit the raw view and the  rich document view will update live, accordingly. The reverse is also true - any changed in the rich view are instantly reflected in the raw view.
  <li><div class = "makeAmplet"></div></li> Converts the selected text into an amplet. The selection must be a unary message which, when sent to the document, returns a Hopscotch fragment.
   <li><div class = "saveDocument"></div></li> Saves the document.
   <li><div class="hopscotchRefreshButton"> </div> Refreshes the display.</li>
   <li><div class = "hopscotchHelpButton"></div> Displays this help message.</li>
   <li><div class = "documentMenu"></div></li> A menu with options for inspecting the document in an object presenter, inspecting this presenter or deleting the document.
  </ul>' mapping: mapping
)
definition ^ <Fragment> = (
  twoViewEditor::  (TwoViewEditorSubject onModel:  subject document) presenter.  
  ^column: {
       helpSection.
       toolbarToggle.
       twoViewEditor
  }
)
respondToMakeList = (
  twoViewEditor respondToMakeList
)
respondToMakeLink = (
  twoViewEditor respondToMakeLink
)
respondToMakeOrderedList = (
  twoViewEditor respondToMakeOrderedList
)
showItButton = (
  ^button: 'Show It' action: [respondToShowIt]
)
respondToShowIt = (
  twoViewEditor respondToShowIt
)
public respondToMakeButton = ( 
  twoViewEditor respondToMakeButton
)
public toolbarToggle = (
  ^collapsed: [nothing] expanded: [row: {
         label: subject name.
         smallBlank.
         rawViewExposureButton.
         smallBlank.
         button: 'B' action: [respondToMakeBold].
         smallBlank.
         button: 'i' action: [respondToMakeItalic].
         smallBlank.
         button: 'U' action: [respondToUnderline].
         smallBlank. 
         button: 'List' action: [respondToMakeList].
         smallBlank. 
         button: 'Ordered List' action: [respondToMakeOrderedList].
         smallBlank.         
         button: 'Link' action: [respondToMakeLink].
         smallBlank.          
         makeAmpletButton.
         smallBlank.          
         showItButton. 
         smallBlank.
         button: 'Make DoIt Button' action: [respondToMakeButton].         
         smallBlank.
         button: 'Define It' action: [twoViewEditor respondToDefineIt].
         itemReferencesButtonWithAction: [browseSelector: subject name].
         smallBlank.
         saveDocumentButton.
         smallBlank.
         refreshButton.			
         smallBlank.
         helpButton.
         smallBlank.
         dropDownMenu: [docMenu].
        }].
)
docMenu ^ <Menu> = (
  (* Need inspect presenter, delete *)
  ^menuWithLabelsAndActions: {
        {'Inspect Document Object'. [respondToInspectDocument]}.
        {'Inspect Presenter'. [respondToInspectPresenter]}.
        #separator.
        {'Delete'. [respondToDelete]}.
        {'Save zip'. [subject saveZip] }.
	}
)
) : (
public onSubject: os <ObjectSubject> ^ <Instance> = (
  ^onDocumentSubject: (DocumentSubject onModel: os objectMirror reflectee)
)
)
public class DocumentSubject onModel: m <Document> = Subject onModel: m (
) (
public isKindOfDocumentSubject ^ <Boolean> = (
  ^true
)
isMyKind: other ^ <Boolean> = (
  ^other isKindOfDocumentSubject
)
public name ^ <String> = (
  ^document name
)
public document ^ <Document> = (
  ^model
)
public createPresenter ^ <DocumentPresenter> = (
  ^DocumentPresenter onDocumentSubject: self
)
public save = (
	ide webFiles downloadFileName: name, '.html' fromString: completeHTML. 
)
psoupHTML ^ <String> = (
  ^'   <script type="text/javascript">
      function scheduleTurn(timeout) {
        if (timeout >= 0) {
          setTimeout(function() {
            var timeout = Module._handle_message();
            scheduleTurn(timeout);
          }, timeout);
        }
      }

      var Module = {
        noInitialRun: true,
        noExitRuntime: true,
        onRuntimeInitialized: function() {
          var url = new URLSearchParams(window.location.search);
          var request = new XMLHttpRequest();
          request.open("GET", url.get("snapshot"), true);
          request.responseType = "arraybuffer";
          request.onload = function (event) {
            var jsBuffer = new Uint8Array(request.response);
            var cBuffer = _malloc(jsBuffer.length);
            writeArrayToMemory(jsBuffer, cBuffer);
            Module._load_snapshot(cBuffer, jsBuffer.length);
            _free(cBuffer);
            scheduleTurn(0);
          };
          request.send();
        },
        print: function(text) {
          if (arguments.length > 1) {
            text = Array.prototype.slice.call(arguments).join(" ");
          }
          console.log(text);
        },
        printErr: function(text) {
          if (arguments.length > 1) {
            text = Array.prototype.slice.call(arguments).join(" ");
          }
          console.error(text);
        },
        setStatus: function(text) {
          console.log(text);
        },
      };
    </script>
<script async type="text/javascript" src="primordialsoup.js"></script>
    <script src="CodeMirror/lib/codemirror.js"></script>
    <link rel="stylesheet" href="CodeMirror/lib/codemirror.css"></link>
    <script src="CodeMirror/addon/display/autorefresh.js"></script>'
)
public printString ^ <String> = (
  ^'Document ', name
)
public completeHTML ^ <String>  = (
  ^'<div class = "ampleforthDocumentClass" name = "', 
  document name, 
  '" classBody = "',
  document classSource,
  '" </div><div class = "ampleforthDocumentBody">', 
  document contents, 
  '</div>', 
  psoupHTML
)
public cloneNamed: n <String>  (* :exemplar: cloneNamed: #Dummy *)= (
   | 
   mb = documentHolderMixinBuilder.
   |
   (* clone document class *)
   mb nestedClasses addFromSource: 'public class ', n, ' contents: c <String> = Document named: #', n,  ' contents: c ',  document classSource.
   mb declaration install. 
   (* instantiate cloned class, and use it as model for an instance of my class, which we return *)
   ^class onModel: ((((ObjectMirror reflecting: ide documentHolder) evaluate: n) result reflectee) contents: document contents)
)
processTranscludedUsingFolder: folder = (
  | transcluded = folder addFolder: 'transcluded'. |
  (* for each transcluded document in the main document, save it in zip folder 'transcluded' *)
   transcludedDocuments do: [:d <DocumentSubject> | transcluded addFolder: d saveZip].
)
transcludedDocuments ^ <List[DocumentSubject]> = (
(* Placeholder. Should return a list of subjects on transcluded documents within the model *)
  ^{} 
)
public saveZip = (
(*
We distinguish between a document's basic content and its external dependencies. Likewise between a player/interpreter and content, and between a player and its external dependencies.

We want to be able to persist standalone data, which is self describing, and data that is subject to/in need of interpretation by a player.

The former scenario allows us to just deploy something and give a URI for it. The latter avoids bloat and allows a player to share content from multiple sources.

To address these requirements, we can view the world as a nested tree of players and content.

Each level includes the player, its external dependencies, and a content subtree. Concretely, these are zip files

Level 1:

AmpleforthPlayer.vfuel
Dependencies such as CodeMirror, png files etc.
Content (Level 2):
   Telescreen.html (the player. Not every doc is a player, but it can be)
   Dependencies (might not be any in this example, but say Telescreen used a custom icon) 
   Content (Level 3):
      APreso.zip
     Dependencies, such as images, video/audio, classes and transcluded documents (each constituting its own subdirectory at level 4) 

In principle, level 0 would use primordialsoup.(html, js, wasm) as player, and the vfuel as content,
but the VM is set to take the content as an explicit parameter.

At level -1 the player is the web browser, and psoup is the content. Indeed, we face this issue when we choose between a web site (which has psoup set up to interpret content) and using Electron, where we have a complete standalone set up. And the OS is the player at level -2, with the web browser as content.

Now we have the choice of packaging player alone, content alone, or combining them.

Saving, in the traditional sense, saves content (and its dependencies), in a zip file. Deploying saves a zip file with the player and the content. If the content is itself a player (say, a doc that is an app, like Telescreen) and we save, we get the application/player, which can then be used to load content saved from multiple sources. In contrast, deployment saves content and its player as a standalone unit.

Content could of course include multiple units (say, a list of presentations). Each player knows how to interpret content. Content might come with an external resource to guide it (say, a class with code).
*)
  | 
  folder = (* Create a zip folder *) ide webFiles Folder named: name. 
    (* add contents subfolder *)
  innerFolder = folder addFolder: 'contents'.
  |
  (* add main document to folder *)
  folder addTextFile: name, '.html' contents: completeHTML.
  (* add resources to folder *)
  processImagesUsingFolder: folder.
  (* processMediaUsingFolder: folder  - or are video and audio separate?*)
  (* process transcluded documents *)
  processTranscludedUsingFolder: folder.
  (* add contents if any *)
  model addContentsUsingFolder: innerFolder.
  folder save. (* (* ultimately the save method will call this method, get folder returned and save it) *) ^folder *)
)
processImagesUsingFolder: folder = (
  | 
  dom = DOMParser new parseFromString: document contents mimeType: 'text/html'.
  images = dom getElementsByTagName: #img.
  imageFolder = folder getFolder: 'images'.
  |
  (* for each image in the main document, save contents to file in zip folder 'images' *)
  (0 to: (images at: #length) -1) do: [:i <Integer> | 
  | img <Alien[Node]> = images at: i.  fn <String> = img at: #name. |
    imageFolder file: fn contents: ((retainedPlatform js global fetch: (img at: #src)) then: [:r | r blob]). 
  ].
)
) : (
)
class DummySubject = Subject onModel: nil (
) (
public isKindOfDummySubject ^ <Boolean> = (
  ^true
)
isMyKind: other ^ <Boolean> = (
  ^other isKindOfDummySubject
)
) : (
)
dummySubject ^ <Subject> = (
  ^DummySubject new  
)
createDocumentSubclassNamed: n <Symbol> body: b <String> ^ <Class> (* :exemplar: createDocumentSubclassNamed: #ADoc body: '()()' *)= ( 
  | 
  src <String> = 'public class ', n,  ' contents: c <String> = Document named: #', n , ' contents: c ',  b. 
  mb <MixinBuilder> = documentHolderMixinBuilder.
  |
  mb nestedClasses addFromSource: src.
  mb declaration install.
  ^((ObjectMirror reflecting: ide documentHolder ) evaluate: n) result reflectee
)
public classOfHTMLDocument: dom <Alien[Node]>  ^ <Class> = (

  | 
  candidates <Alien[Array[Element]]> = dom getElementsByClassName: #ampleforthDocumentClass.
  ampleforthDocumentClass <Alien[Element] | Nil> = ((candidates at: 'length') = 0) ifFalse: [candidates at: 0].
  classBody <String>
  className <String> = ampleforthDocumentClass getAttribute: #name.
  |
  classBody:: (ampleforthDocumentClass isNil not and: [ampleforthDocumentClass hasAttribute: #classBody])   
     ifTrue: [ampleforthDocumentClass getAttribute: #classBody]
     ifFalse: ['()()'].
  ^createDocumentSubclassNamed: className body: classBody
)
public freshDocumentFromDOM: dom <Alien[Node]> ^ <Document> = (
  ^(classOfHTMLDocument: dom) contents: (textOfHTMLDocument: dom)
)
public freshDocumentWithContents: c <String> ^ <Document> = (

  | DOM <Alien[Element]> = DOMParser new parseFromString: c mimeType: 'text/html'. |
  ^freshDocumentFromDOM: DOM
)
public freshDocumentNamed: n <Symbol> ^ <Document> = (
  ^freshDocumentWithContents: '<div class = "ampleforthDocumentClass" name = "', n, '" classBody = "
()()"></div><div class = "ampleforthDocumentBody">', defaultAmpleforthDocumentBodyInnerHTML, '</div>'
)
public textOfHTMLDocument: dom  <Alien[Node]>  ^ <String> = (
  | 
  docCandidates = dom getElementsByClassName: 'ampleforthDocumentBody'. 
  ampleforthDocument <Alien[Element] | Nil> = 
    ((docCandidates at: 'length') = 0) ifFalse: [docCandidates at: 0].
  |
  ^ampleforthDocument ~= nil ifTrue: [ampleforthDocument at: #innerHTML]  ifFalse: [defaultAmpleforthDocumentBodyInnerHTML].
)
public documentHolderMixinBuilder ^ <MixinBuilder> = (
  ^(ObjectMirror reflecting: ide documentHolder) getClass mixin asBuilder
)
defaultAmpleforthDocumentBodyInnerHTML ^ <String> = (
  ^'<div class="self_ampleforth" contenteditable="true" style="border: 2px solid blue; resize: horizontal; overflow: auto; overflow-wrap: break-word; width: 40em;" onkeyup="updateRawHTML()" ondragover="((e) => {e.preventDefault();})(event)" ondrop="((e) => {
              e.preventDefault();
            // Calculate the drop position within the text
            const range = document.caretRangeFromPoint(e.clientX, e.clientY);
            // Create a new text node to separate the image from the surrounding text
            const textNode = document.createTextNode(''\u00A0''); // Non-breaking space
            // Insert the text node at the calculated position
            range.insertNode(textNode);
            // Loop through dropped files
            for (const file of e.dataTransfer.files) {
                if (file.type.startsWith(''image/'')) {
                              console.log(file.size);
                              const imageElement = document.createElement(''img'');
                              // Set the image element src field to a blob URL we create
                              imageElement.src = window.URL.createObjectURL(file);
                              imageElement.style.maxWidth = ''300px'';
                              imageElement.name = file.name;
                              // Insert the image after the text node
                              textNode.after(imageElement);               
               } // if (file.type.startsWith(...)
            }//for (const file of e.dataTransfer.files
  }// ondrop body
  )//ondrop closure
  (event)"> <!-- self_ampleforth -->
  <h1>This is a blank document.</h1>    <script>

        const textContainer = document.querySelector(''p'');
</div>'
)
) : (
)
